x-environment: &oncall-environment
  DATABASE_TYPE: sqlite3
  BROKER_TYPE: redis
  BASE_URL: $DOMAIN
  SECRET_KEY: $SECRET_KEY
  FEATURE_PROMETHEUS_EXPORTER_ENABLED: ${FEATURE_PROMETHEUS_EXPORTER_ENABLED:-false}
  PROMETHEUS_EXPORTER_SECRET: ${PROMETHEUS_EXPORTER_SECRET:-}
  REDIS_URI: redis://redis:6379/0
  DJANGO_SETTINGS_MODULE: settings.hobby
  CELERY_WORKER_QUEUE: "default,critical,long,slack,telegram,webhook,retry,celery,grafana"
  CELERY_WORKER_CONCURRENCY: "1"
  CELERY_WORKER_MAX_TASKS_PER_CHILD: "100"
  CELERY_WORKER_SHUTDOWN_INTERVAL: "65m"
  CELERY_WORKER_BEAT_ENABLED: "True"
  GRAFANA_API_URL: http://grafana:3000
  GRAFANA_CLOUD_ONCALL_API_URL: https://oncall-prod-eu-west-0.grafana.net/oncall

services:
  engine:
    container_name: grafana_oncall_engine
    hostname: engine
    image: grafana/oncall
    user: ${DOCKER_USER}
    restart: always
    command: sh -c "uwsgi --ini uwsgi.ini"
    environment: *oncall-environment
    volumes:
      - /docker/volumes/grafana/oncall_data:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  celery:
    container_name: grafana_oncall_celery
    hostname: celery
    image: grafana/oncall
    user: ${DOCKER_USER}
    restart: always
    command: sh -c "./celery_with_exporter.sh"
    environment: *oncall-environment
    volumes:
      - /docker/volumes/grafana/oncall_data:/var/lib/oncall
    depends_on:
      oncall_db_migration:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  oncall_db_migration:
    container_name: grafana_oncall_db_migration
    image: grafana/oncall
    user: ${DOCKER_USER}
    command: python manage.py migrate --noinput
    environment: *oncall-environment
    volumes:
      - /docker/volumes/grafana/oncall_data:/var/lib/oncall
    depends_on:
      redis:
        condition: service_healthy

  redis:
    container_name: grafana_redis
    hostname: redis
    image: redis:7.0.15
    user: ${DOCKER_USER}
    restart: always
    expose:
      - 6379
    volumes:
      - /docker/volumes/grafana/redis_data:/data
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      interval: 5s
      retries: 10

  grafana:
    container_name: grafana_grafana
    hostname: grafana
    image: grafana/${GRAFANA_IMAGE:-grafana:latest}
    user: ${DOCKER_USER}
    ports:
      - "127.0.0.1:8002:3000"
    environment:
      - GF_DEFAULT_INSTANCE_NAME=grafana
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_FEATURE_TOGGLES_ENABLE=externalServiceAccounts
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=grafana-oncall-app
      - GF_INSTALL_PLUGINS=grafana-oncall-app
      - GF_AUTH_MANAGED_SERVICE_ACCOUNTS_ENABLED=true
    deploy:
      resources:
        limits:
          memory: 500m
          cpus: "0.5"
    volumes:
      - /docker/volumes/grafana/data:/var/lib/grafana
    restart: always
    configs:
      - source: grafana.ini
        target: /etc/grafana/grafana.ini

  prometheus:
    container_name: grafana_prometheus
    image: prom/prometheus:latest
    user: ${DOCKER_USER}
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - /docker/volumes/grafana/prometheus_data:/prometheus
    restart: always

  node-exporter:
    container_name: grafana_node_exporter
    image: prom/node-exporter:latest
    user: ${DOCKER_USER}
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

configs:
  grafana.ini:
    content: |
      [feature_toggles]
      accessControlOnCall = false
